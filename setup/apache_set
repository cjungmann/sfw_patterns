#!/bin/bash

declare DEF_SITE_NAME=sfw_simple
declare DEF_DBASE_NAME=SFW_Simple
declare DEF_SITE_INDEX=Person.srm

declare DEF_CONF_FILE="
<VirtualHost *:80>
   DocumentRoot #root#
   ServerName #name#
   DirectoryIndex #index#
</VirtualHost>
"

# https://en.wikipedia.org/wiki/Command-line_interface#Command_description_syntax
# <...> required elements
# [...] optional elements
# | demarks equivalent alternatives
show_usage()
{
    echo >&2
    echo "Usage (must run as 'root'):" >&2
    echo "$ sudo ./apache_set <install | uninstall> [site name] [-h]" >&2
    echo "$" >&2
    echo "The site name, if not overridden by the parameter, will be ${DEF_SITE_NAME}"
    echo "If the -h argument is included, the site name will be (un)installed from /etc/hosts"
    echo >&2
    echo "Example:" >&2
    echo "    The following command will create and install," >&2
    echo "    to the official Apache directory /etc/apache2/sites-available," >&2
    echo "    the file sfw_demo.conf, in which the host name will be sfw_demo." >&2
    echo "$ sudo ./apache_set install sfw_demo" >&2
    echo >&2
}

# Preserve parameter count for boolean function:
declare -i CMD_ARGC=$#

# Boolean functions to clarify meaning and intent:
has_minimum_args() { [ $CMD_ARGC -gt 0 ]; }
running_as_root()  { [ "${USER}" = "root" ]; }

# Confirm script's  minimum operating requirements:
if ! has_minimum_args; then
    echo "At least one parameter ('install' or 'uninstall') is required." >&2
    show_usage
    return 1
elif ! running_as_root; then
    echo "User must run as 'root' to execute scripted commands." >&2
    show_usage
    return 1
fi

# Identify parameter values with names:
declare ACTION="$1"
declare site_index="${DEF_SITE_INDEX}"
declare site_name="${DEF_SITE_NAME}"
declare -i update_hosts=0

declare PARM
for PARM in "${@:2}"; do
    if [ $PARM = '-h' ]; then
        update_hosts=1
    else
        site_name="$PARM"
    fi
done

# Manage previous setup breadcrumbs for uninstall:
declare status_target="./installed_site.txt"
declare conf_base="/etc/apache2/sites-"
declare existing_site_name existing_path_conf existing_path_enabled

if [ -f "${status_target}" ]; then
    existing_site_name=$( <"${status_target}" )
    existing_path_conf="${conf_base}available/${existing_site_name}.conf"
    existing_path_enabled="${conf_base}enabled/${existing_site_name}.conf"
fi

site_installed() { [ -n "${existing_path_conf}" -a -f "${existing_path_conf}" ]; }
site_enabled()   { [ site_installed && -f "${existing_path_enabled}" ]; }
save_site_name() { echo "${site_name}" > "${status_target}"; }

# Target for new install, separate from previously existing:
conf_target="/etc/apache2/sites-available/${site_name}.conf"

###### /etc/hosts editing section ######
declare etc_hosts_path="/etc/hosts"
# declare etc_hosts_path="fake_hosts"

declare local_address=$( grep -v  '^\s*#' "${etc_hosts_path}" | grep 'localhost$' - | cut -f 1 - )

hostname_exists()
{
    local hostname="${1}"
    local target="^${local_address}\s\+${hostname}\$"
    local entry=$( grep "${target}" "${etc_hosts_path}" )
    [ -n "${entry}" ]
}

# The only parameter needed is the hostname.  The current
# ACTION setting will be retrieved from the global variable.
modify_etc_hosts()
{
    local hostname="${site_name}"
    local newfile
    local -i response=-1

    if [ $ACTION = "install" ]; then
        if hostname_exists "${hostname}"; then
            echo "Hostname '${hostname}' already exists.  No changes made." >&2
        else
            newfile=$( echo "${local_address}	${hostname}" | cat "${etc_hosts_path}" - )
        fi
    elif [ $ACTION = "uninstall" ]; then
        if hostname_exists "${hostname}"; then
            newfile=$( sed "/${local_address}\s\+${hostname}/d" "${etc_hosts_path}" )
        else
            echo "Hostname '${hostname}' not found in hosts. No changes made." >&2
        fi
    fi

    if [ -n "$newfile" ]; then
        clear_screen

        echo "### File differences follow ###"
        echo "${newfile}" | diff -y "${etc_hosts_path}" -
        echo
        echo "### End of file differences output ###"
        echo
        echo "The existing file is on the left, the proposed changes on the right."
        while [ $response -ne 0 ] && [ $response -ne 1 ]; do
            read -p "Save changes to '${etc_hosts_path}' (1=yes, 0=no) " response
        done

        if [ $response -eq 1 ]; then
            echo "Writing new text to '${etc_hosts_path}'" >&2
            echo "${newfile}" > "${etc_hosts_path}"
        else
            echo "Left '${etc_hosts_path}' unchanged." >&2
        fi
    fi
}

install_conf()
{
    cd ..
    path_site="${PWD}/site"
    cd -

    rep_path="s|#root#|${path_site}|"
    rep_name="s|#name#|${site_name}|"
    rep_index="s|#index#|${site_index}|"
    echo "${DEF_CONF_FILE}" | sed -e "${rep_path}" -e "${rep_name}" -e "${rep_index}" - > "${conf_target}"

    save_site_name

    a2ensite -q "${site_name}"
    if [ $? -eq 0 ]; then
        echo "Reloading apache2" >&2
        service apache2 reload
    else
        echo "Failed to enable the site." >&2
        echo >&2
    fi
}

uninstall_conf()
{
    a2dissite -q "${existing_site_name}"
    if [ $? -eq 0 ]; then
        service apache2 reload
        rm "${existing_path_conf}"
        rm "${status_target}"
        return 0
    else
        echo "Failed to disable the site." >&2
        echo >&2
        return 1
    fi
}


if [ "$ACTION" = "install" ]; then
    if site_installed; then
        echo "The site '${site_name}' is already installed." >&2
        echo "Uninstall '${site_name}' or provide a different name." >&2
        echo >&2
    else
        install_conf
        if [ $update_hosts -ne 0 ]; then
            modify_etc_hosts
        fi
        exit 0
    fi
elif [ "$ACTION" = "uninstall" ]; then
    if site_installed; then
        uninstall_conf
        if [ $update_hosts -ne 0 ]; then
            modify_etc_hosts
        fi
        exit 0
    else
        echo "Site '${site_name}' not found, terminating command." >&2
        echo >&2
    fi
else
    echo "Unknown ACTION parameter '${ACTION}'." >&2
    show_usage
fi

exit 1

